using FlavorfulStory.Actions;
using FlavorfulStory.Audio;
using FlavorfulStory.CursorSystem;
using FlavorfulStory.InputSystem;
using FlavorfulStory.InteractionSystem;
using FlavorfulStory.InventorySystem;
using FlavorfulStory.InventorySystem.DropSystem;
using FlavorfulStory.InventorySystem.UI;
using FlavorfulStory.PlacementSystem;
using FlavorfulStory.Stats;
using FlavorfulStory.Tools;
using FlavorfulStory.Utils;
using UnityEngine;
using UnityEngine.EventSystems;
using Zenject;

namespace FlavorfulStory.Player
{
    /// <summary> –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–≥—Ä–æ–∫–∞, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ,
    /// –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º. </summary>
    [RequireComponent(typeof(PlayerMover), typeof(Animator), typeof(ToolHandler))]
    [RequireComponent(typeof(PlayerStats))]
    public class PlayerController : MonoBehaviour
    {
        #region Fields and Properties

        /// <summary> –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º –≤—ã–±—Ä–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–∞. </summary>
        /// <remarks> –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è –≤ <see cref="IItemDropService"/>. </remarks>
        [SerializeField] private Transform _dropPoint;

        /// <summary> –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞. </summary>
        private Inventory _playerInventory;

        /// <summary> –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. </summary>
        private Toolbar _toolbar;

        /// <summary> –°–µ—Ä–≤–∏—Å –≤—ã–±—Ä–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. </summary>
        private IItemDropService _itemDropService;

        /// <summary> –°—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞. </summary>
        private PlayerStats _playerStats;

        /// <summary> –ó–∞–Ω—è—Ç –ª–∏ –∏–≥—Ä–æ–∫? </summary>
        private bool _isBusy;

        /// <summary> –ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞. </summary>
        private PlayerMover _playerMover;

        /// <summary> –ê–Ω–∏–º–∞—Ç–æ—Ä –∏–≥—Ä–æ–∫–∞. </summary>
        private Animator _animator;

        /// <summary> –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏. </summary>
        private InteractionController _interactionController;

        [SerializeField] private PlacementController _placementController;

        private ToolUsageService _toolUsageService;

        #region Tools

        /// <summary> –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. </summary>
        private ToolHandler _toolHandler;

        /// <summary> –¢–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. </summary>
        private float _toolCooldownTimer;

        /// <summary> –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç? </summary>
        private bool CanUseTool => _toolCooldownTimer <= 0f;

        /// <summary> –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞? </summary>
        private bool IsToolUseBlocked => !CanUseTool || _isBusy || EventSystem.current.IsPointerOverGameObject();

        #endregion

        /// <summary> –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ø–∞–Ω–µ–ª–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. </summary>
        private InventoryItem CurrentItem => _toolbar?.SelectedItem;

        #endregion

        /// <summary> –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ‚Äî –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞. </summary>
        /// <param name="inventory"> –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞. </param>
        /// <param name="toolbar"> </param>
        /// <param name="itemDropService"> –°–µ—Ä–≤–∏—Å –≤—ã–±—Ä–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–æ–≤–æ–π –º–∏—Ä. </param>
        [Inject]
        private void Construct(Inventory inventory, Toolbar toolbar, IItemDropService itemDropService)
        {
            _playerInventory = inventory;
            _toolbar = toolbar;
            _itemDropService = itemDropService;
            //     _placementController = placementController; // TODO –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ Zenject
        }

        /// <summary> –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. </summary>
        private void Awake()
        {
            _playerStats = GetComponent<PlayerStats>();
            _playerMover = GetComponent<PlayerMover>();
            _animator = GetComponent<Animator>();


            _interactionController = GetComponentInChildren<InteractionController>();
            _interactionController.StartInteractionAction = () => SetBusyState(true);
            _interactionController.EndInteractionAction = () => SetBusyState(false);

            _toolHandler = GetComponent<ToolHandler>();
            _toolHandler.UnequipAction = () => SetBusyState(false);


            PlayerModel.SetPositionProvider(() => transform.position);

            _toolUsageService = new ToolUsageService(_toolHandler.HitableLayers);
        }

        /// <summary> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞. </summary>
        private void Update()
        {
            HandleInput();
            if (_toolCooldownTimer > 0f) _toolCooldownTimer -= Time.deltaTime;
            if (InteractWithComponent()) return;
            CursorController.SetCursor(CursorType.Default);
        }

        /// <summary> –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞. </summary>
        private void HandleInput()
        {
            HandleToolbarSelectionInput();
            HandleToolbarUseInput();
            HandleMovementInput();
        }

        /// <summary> –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä. </summary>
        /// <returns> True, –µ—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. </returns>
        private bool InteractWithComponent()
        {
            var hits = PhysicsUtils.SphereCastAllSorted(CameraUtils.GetMouseRay()); // TODO: –í—ã–Ω–µ—Å—Ç–∏ –æ—Ç—Å—é–¥–∞
            foreach (var hit in hits)
            {
                var cursorInteractables = hit.transform.GetComponents<ICursorInteractable>();
                foreach (var cursorInteractable in cursorInteractables)
                    if (cursorInteractable.TryInteractWithCursor(this))
                    {
                        CursorController.SetCursor(cursorInteractable.CursorType);
                        return true;
                    }
            }

            return false;
        }

        /// <summary> –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. </summary>
        private void HandleToolbarSelectionInput()
        {
            if (_isBusy) return;

            const int ToolbarItemsCount = 10;
            for (int i = 0; i < ToolbarItemsCount; i++)
            {
                var key = i == 9 ? KeyCode.Alpha0 : KeyCode.Alpha1 + i;
                if (!Input.GetKeyDown(key)) continue;

                _toolbar.SelectItem(i);

                // TODO: –±–∞–≥ –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Ç—É–ª–±–∞—Ä —Å–ª–æ—Ç, —Ç–æ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å —Ö–æ—Ç–∫–µ–π
                if (_toolbar.SelectedItem is PlaceableItem placeable && _placementController)
                    _placementController.EnterPlacementMode(PlacementModeType.Place, placeable.Prefab);
                else if (_placementController) _placementController.ExitCurrentMode(); // –µ—Å–ª–∏ —É–±—Ä–∞–ª ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º —Å–µ—Ç–∫—É

                break;
            }
        }

        /// <summary> –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. </summary>
        private void HandleToolbarUseInput()
        {
            if (!CurrentItem || IsToolUseBlocked) return;

            if (CurrentItem is Tool tool)
                if ((Input.GetMouseButton(0) && tool.UseActionType == UseActionType.LeftClick) ||
                    (Input.GetMouseButton(1) && tool.UseActionType == UseActionType.RightClick))
                    TryUseTool(tool);

            if (CurrentItem is EdibleInventoryItem edible)
                if ((Input.GetMouseButton(0) && edible.UseActionType == UseActionType.LeftClick) ||
                    (Input.GetMouseButton(1) && edible.UseActionType == UseActionType.RightClick))
                    ConsumeEdibleItem(edible);

            if (CurrentItem.CanBeDropped && InputWrapper.GetButtonDown(InputButton.DropCurrentItem))
                HandleCurrentItemDrop();
        }

        private void TryUseTool(Tool tool)
        {
            if (!_toolUsageService.TryUseTool(this, tool)) return;

            _toolHandler.Equip(tool);
            SetBusyState(true);
            _toolCooldownTimer = PlayerModel.ToolCooldown;
        }

        /// <summary> –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. </summary>
        private void HandleCurrentItemDrop()
        {
            const float DropItemForce = 2.5f;
            _itemDropService.DropFromInventory(_playerInventory, _toolbar.SelectedItemIndex,
                _dropPoint.transform.position, _dropPoint.forward * DropItemForce);
        }

        /// <summary> –°—ä–µ—Å—Ç—å —Å—ä–µ–¥–æ–±–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç –∫ –∏–≥—Ä–æ–∫—É. </summary>
        /// <param name="edible"></param>
        private void ConsumeEdibleItem(EdibleInventoryItem edible)
        {
            // TODO: –ë–ê–ì–ê –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç
            _playerInventory.RemoveFromSlot(_toolbar.SelectedItemIndex, 1);
            InputWrapper.UnblockPlayerInput();
            SetBusyState(false);

            SfxPlayer.Play(edible.SfxType);

            // TODO: –ù–∞ –±—É–¥—É—â–µ–µ
            //Eat(player.GetComponent<PlayerStats>());
            Debug.Log("üçé –ï–º –≤–∫—É—Å–Ω—É—é –µ–¥—É. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª HP –∏ —ç–Ω–µ—Ä–≥–∏—é.");
        }

        /// <summary> –ó–∞–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞. </summary>
        /// <param name="state"> –°–æ—Å—Ç–æ—è–Ω–∏–µ. </param>
        /// <remarks> –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –∑–∞–Ω—è—Ç - –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º. </remarks>
        public void SetBusyState(bool state)
        {
            _isBusy = state;
            _toolbar.SetInteractableState(!state);
            if (state)
                InputWrapper.BlockAllInput();
            else
                InputWrapper.UnblockAllInput();
        }

        /// <summary> –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è. </summary>
        private void HandleMovementInput()
        {
            var direction = new Vector3(
                InputWrapper.GetAxisRaw(InputButton.Horizontal),
                0,
                InputWrapper.GetAxisRaw(InputButton.Vertical)
            ).normalized;

            _playerMover.SetMoveDirection(direction);
            if (direction != Vector3.zero) _playerMover.SetLookRotation(direction);
        }

        /// <summary> –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. </summary>
        /// <remarks> –ú–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ (Gather_interaction). </remarks>
        private void EndInteraction() => _interactionController.EndInteraction();

        /// <summary> –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é. </summary>
        /// <param name="animationType"> –¢–∏–ø –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏.</param>
        public void TriggerAnimation(AnimationType animationType)
        {
            string animationName = animationType.ToString();
            _animator.SetTrigger(Animator.StringToHash(animationName));
        }

        /// <summary> –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é. </summary>
        /// <param name="animationName"> –¢–∏–ø –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏.</param>
        public void TriggerAnimation(string animationName) =>
            _animator.SetTrigger(Animator.StringToHash(animationName));

        /// <summary> –ü–æ–≤–µ—Ä–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏. </summary>
        /// <param name="position"> –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞. </param>
        public void RotateTowards(Vector3 position)
        {
            var direction = (position - transform.position).normalized;
            direction.y = 0;
            _playerMover.SetLookRotation(direction);
        }

        /// <summary> –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≥–ª—è–¥–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏. </summary>
        /// <param name="newTransform"> –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º –∏–≥—Ä–æ–∫–∞. </param>
        public void UpdatePosition(Transform newTransform)
        {
            SetPosition(newTransform.position);
            _playerMover.SetLookRotation(newTransform.forward);
        }

        /// <summary> –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞. </summary>
        /// <param name="newPosition"> –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. </param>
        public void SetPosition(Vector3 newPosition) => _playerMover.SetPosition(newPosition);

        /// <summary> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å–Ω–∞. </summary>
        /// <param name="isExhausted"> –ò—Å—Ç–æ—â–µ–Ω–Ω—ã–π —Å–æ–Ω –∏–ª–∏ –Ω–µ—Ç? </param>
        public void RestoreStatsAfterSleep(bool isExhausted = false)
        {
            const float StaminaRestoreMultiplier = 0.75f;

            var health = _playerStats.GetStat<Health>();
            health.RestoreFull();

            var stamina = _playerStats.GetStat<Stamina>();
            stamina.RestorePercent(isExhausted ? StaminaRestoreMultiplier : 1f);
        }
    }
}